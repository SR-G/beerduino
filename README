BEERDUINO is a small arduino project.
- The program is designed to run on Arduino Board + Ethernet Shield.
- Designed to read various Dallas DS18B20 sensors (on a 1wire bus).
- Reads multiple sensors temperatures.
- Embed a small web-server able to load simple HTML page and XML page with the temperature values.
- Can send a mail if temperature limits are reached.

Tested with Arduino 023 ( http://arduino.cc/ ) on a Duemilanove board.
Binary size < 16384 octets at this time.

For the JAVA program :
- the sketchbook whole project is an Eclipse workspace (switch workspace to it), and the "java/" path is a Eclipse project ;
- needs Maven (external to Eclipse or embedded Maven 3 with Eclipse 3.7+) ;
- if Maven embedded, just right click project > Maven > Update dependencies ;
- configure "beerduino.cfg" as needed (arduino ip address, notifications, ...) ;
- run "src/main/java/Beerduino.java" (main entry point) ;

Use a few libraries (included in this github) :
- OneWire (v2) ( http://www.pjrc.com/teensy/td_libs_OneWire.html ) ;
- Webduino ( https://github.com/sirleech/Webduino ) ;
- Streaming ( http://arduiniana.org/2009/04/new-streaming-library/ ) ;
- DallasTemperature ( http://www.milesburton.com/?title=Dallas_Temperature_Control_Library ) ;

Links :
- A good tutorial (for electric schema and various other information on 1wire) : http://www.mon-club-elec.fr/pmwiki_mon_club_elec/pmwiki.php?n=MAIN.ArduinoExpertCapteursComplexesDS18B20Detection
- Dallas DS18B20 specs : http://datasheets.maxim-ic.com/en/ds/DS18B20.pdf
- Arduino utorial about 1wire : http://www.arduino.cc/playground/Learning/OneWire
- Dallas sensors can be bought on ebay or here : http://www.domadoo.fr
- Another GITHub project with the same name and a related purpose : https://github.com/malcolmmp/Beerduino/blob/master/Beerduino.pde
- Yet another related project : http://www.uchobby.com/index.php/2007/10/08/arduino-beer-thermostat/

How to configure Preferences ?

<!-- BEGIN_AUTOGENERATED_CONTENT_PREFERENCES -->
[1.preferences](#1.preferences)

    Beerduino global preferences.

# Attributs

<table>
  <tr>
    <th>**Attributs**</th>
    <th>**Type**</th>
    <th>**Req**</th>
    <th>**Description**</th>
  </tr>
  <tr>
    <td>noNamespaceSchemaLocation</td>
    <td>String</td>
    <td>   </td>
    <td>XSD internal definition</td>
  </tr>
</table>


# Elements

<table>
  <tr>
    <th>**Elements**</th>
    <th>**Type**</th>
    <th>**Req**</th>
    <th>**Description**</th>
  </tr>
  <tr>
    <td>arduinoIp</td>
    <td>String</td>
    <td> X </td>
    <td>IP address of the arduino board</td>
  </tr>
  <tr>
    <td>arduinoPort</td>
    <td>int</td>
    <td> X </td>
    <td>Port of the arduino board. Default to 80.</td>
  </tr>
  <tr>
    <td>arduinoCheckFrequency</td>
    <td>int</td>
    <td>   </td>
    <td>Frequency of the arduino values checkout. In milliseconds. Default to 1000.</td>
  </tr>
  <tr>
    <td>seuils</td>
    <td>[seuil](#2.seuil)</td>
    <td>   </td>
    <td>Temperatures warnings (after / below whom a notification will be sent)</td>
  </tr>
  <tr>
    <td>Liste de [mail](#3.mail)</td>
    <td>[mail](#3.mail)</td>
    <td> X </td>
    <td>Notifications mechanism. Multiple notifications may be defined at the same time.</td>
  </tr>
  <tr>
    <td>Liste de [sms](#5.sms)</td>
    <td>[sms](#5.sms)</td>
    <td> X </td>
    <td>Notifications mechanism. Multiple notifications may be defined at the same time.</td>
  </tr>
  <tr>
    <td>Liste de [push](#6.push)</td>
    <td>[push](#6.push)</td>
    <td> X </td>
    <td>Notifications mechanism. Multiple notifications may be defined at the same time.</td>
  </tr>
  <tr>
    <td>Liste de [url](#7.url)</td>
    <td>[url](#7.url)</td>
    <td> X </td>
    <td>Notifications mechanism. Multiple notifications may be defined at the same time.</td>
  </tr>
  <tr>
    <td>workDir</td>
    <td>String</td>
    <td>   </td>
    <td>Temp directory.</td>
  </tr>
</table>


# Exemple

<pre>
<preferences noNamespaceSchemaLocation='...'>
   <!-- Description de 'arduinoIp' -->
   <arduinoIp>. . .</arduinoIp>

   <!-- Description de 'arduinoPort' -->
   <arduinoPort>. . .</arduinoPort>

   <!-- Description de 'arduinoCheckFrequency' -->
   <arduinoCheckFrequency>. . .</arduinoCheckFrequency>

   <!-- Description de 'seuils' -->
   <seuils>
   . . .
   </seuils>

   <!-- Liste de 'mail' -->
   <mail>
   . . .
   </mail>
   .
   .
   .
   <mail>
   . . .
   </mail>

   <!-- Liste de 'sms' -->
   <sms>
   . . .
   </sms>
   .
   .
   .
   <sms>
   . . .
   </sms>

   <!-- Liste de 'push' -->
   <push>
   . . .
   </push>
   .
   .
   .
   <push>
   . . .
   </push>

   <!-- Liste de 'url' -->
   <url>
   . . .
   </url>
   .
   .
   .
   <url>
   . . .
   </url>

   <!-- Description de 'workDir' -->
   <workDir>. . .</workDir>
</preferences>
</pre>

# Implémentation

<table>
  <tr>
    <td>**Package**</td>
    <td>org.tensin.beerduino</td>
  </tr>
  <tr>
    <td>**Classe**</td>
    <td>Preferences</td>
  </tr>
</table>



[2.seuil](#2.seuil)

    Definition of a temperature limit for a sensor

# Attributs

<table>
  <tr>
    <th>**Attributs**</th>
    <th>**Type**</th>
    <th>**Req**</th>
    <th>**Description**</th>
  </tr>
  <tr>
    <td>capteur</td>
    <td>String</td>
    <td> X </td>
    <td>Sensor ID (usually a number, corresponding to the sensor linked to the arduino board)</td>
  </tr>
  <tr>
    <td>temperature</td>
    <td>double</td>
    <td> X </td>
    <td>Temperature limit : once reached, the notifications will be activated</td>
  </tr>
</table>


# Exemple

<pre>
<seuil capteur='...' temperature='...' />
</pre>

# Implémentation

<table>
  <tr>
    <td>**Package**</td>
    <td>org.tensin.beerduino</td>
  </tr>
  <tr>
    <td>**Classe**</td>
    <td>TemperatureLimit</td>
  </tr>
</table>



[3.mail](#3.mail)

    Notification by sending an email.

# Attributs

<table>
  <tr>
    <th>**Attributs**</th>
    <th>**Type**</th>
    <th>**Req**</th>
    <th>**Description**</th>
  </tr>
  <tr>
    <td>smtpHostname</td>
    <td>String</td>
    <td>   </td>
    <td>SMTP server for sending the mail</td>
  </tr>
  <tr>
    <td>smtpLogin</td>
    <td>String</td>
    <td>   </td>
    <td>SMTP username</td>
  </tr>
  <tr>
    <td>smtpPassword</td>
    <td>String</td>
    <td>   </td>
    <td>SMTP password</td>
  </tr>
  <tr>
    <td>smtpPort</td>
    <td>int</td>
    <td>   </td>
    <td>SMTP port. Default to 587 for gmail (TLS)</td>
  </tr>
</table>


# Elements

<table>
  <tr>
    <th>**Elements**</th>
    <th>**Type**</th>
    <th>**Req**</th>
    <th>**Description**</th>
  </tr>
  <tr>
    <td>destinataires</td>
    <td>[destinataire](#4.destinataire)</td>
    <td> X </td>
    <td>People to be notified by mail</td>
  </tr>
</table>


# Exemple

<pre>
<mail smtpHostname='...' smtpLogin='...' smtpPassword='...' smtpPort='...'>
   <!-- Description de 'destinataires' -->
   <destinataires>
   . . .
   </destinataires>
</mail>
</pre>

# Implémentation

<table>
  <tr>
    <td>**Package**</td>
    <td>org.tensin.beerduino.notifications</td>
  </tr>
  <tr>
    <td>**Classe**</td>
    <td>MailNotification</td>
  </tr>
</table>



[4.destinataire](#4.destinataire)

    Mail recipient whom the mail will be sent

# Attributs

<table>
  <tr>
    <th>**Attributs**</th>
    <th>**Type**</th>
    <th>**Req**</th>
    <th>**Description**</th>
  </tr>
  <tr>
    <td>email</td>
    <td>String</td>
    <td> X </td>
    <td>Mail that will be used for the to: field</td>
  </tr>
  <tr>
    <td>name</td>
    <td>String</td>
    <td>   </td>
    <td>Name of the recipient</td>
  </tr>
</table>


# Exemple

<pre>
<destinataire email='...' name='...' />
</pre>

# Implémentation

<table>
  <tr>
    <td>**Package**</td>
    <td>org.tensin.beerduino</td>
  </tr>
  <tr>
    <td>**Classe**</td>
    <td>Recipient</td>
  </tr>
</table>



[5.sms](#5.sms)

    Notification by sending an SMS. Not done yet. Where are the free SMS services by the way ?

# Elements

<table>
  <tr>
    <th>**Elements**</th>
    <th>**Type**</th>
    <th>**Req**</th>
    <th>**Description**</th>
  </tr>
  <tr>
    <td>number</td>
    <td>String</td>
    <td> X </td>
    <td>SMS number to send the notification</td>
  </tr>
</table>


# Exemple

<pre>
<sms>
   <!-- Description de 'number' -->
   <number>. . .</number>
</sms>
</pre>

# Implémentation

<table>
  <tr>
    <td>**Package**</td>
    <td>org.tensin.beerduino.notifications</td>
  </tr>
  <tr>
    <td>**Classe**</td>
    <td>SMSNotification</td>
  </tr>
</table>



[6.push](#6.push)

    Notification by activating a PushTo notification.

# Attributs

<table>
  <tr>
    <th>**Attributs**</th>
    <th>**Type**</th>
    <th>**Req**</th>
    <th>**Description**</th>
  </tr>
  <tr>
    <td>url</td>
    <td>String</td>
    <td>   </td>
    <td>The single URL that will be activated.</td>
  </tr>
  <tr>
    <td>pushto-url</td>
    <td>String</td>
    <td>   </td>
    <td>The push-to URL to use. Something like 'http://pushme.to/'.</td>
  </tr>
  <tr>
    <td>id</td>
    <td>String</td>
    <td> X </td>
    <td>Your pushTo ID (login)</td>
  </tr>
  <tr>
    <td>signature</td>
    <td>String</td>
    <td>   </td>
    <td>Signature that will be shown in the pushto notification sent.</td>
  </tr>
</table>


# Exemple

<pre>
<push url='...' pushto-url='...' id='...' signature='...' />
</pre>

# Implémentation

<table>
  <tr>
    <td>**Package**</td>
    <td>org.tensin.beerduino.notifications</td>
  </tr>
  <tr>
    <td>**Classe**</td>
    <td>PushToNotification</td>
  </tr>
</table>



[7.url](#7.url)

    Notification by activating a single URL.

# Attributs

<table>
  <tr>
    <th>**Attributs**</th>
    <th>**Type**</th>
    <th>**Req**</th>
    <th>**Description**</th>
  </tr>
  <tr>
    <td>url</td>
    <td>String</td>
    <td>   </td>
    <td>The single URL that will be activated.</td>
  </tr>
</table>


# Exemple

<pre>
<url url='...' />
</pre>

# Implémentation

<table>
  <tr>
    <td>**Package**</td>
    <td>org.tensin.beerduino.notifications</td>
  </tr>
  <tr>
    <td>**Classe**</td>
    <td>URLNotification</td>
  </tr>
</table>

<!-- END_AUTOGENERATED_CONTENT_PREFERENCES -->

What does the XML results published by the Arduino board look like ?

<!-- BEGIN_AUTOGENERATED_CONTENT_TEMPERATURES_RESULTS -->
[1.sensors](#1.sensors)

    Temperature results. One entry for each sensor.

# Attributs

<table>
  <tr>
    <th>**Attributs**</th>
    <th>**Type**</th>
    <th>**Req**</th>
    <th>**Description**</th>
  </tr>
  <tr>
    <td>time</td>
    <td>String</td>
    <td> X </td>
    <td>Time the whole XML results file has been generated.</td>
  </tr>
</table>


# Elements

<table>
  <tr>
    <th>**Elements**</th>
    <th>**Type**</th>
    <th>**Req**</th>
    <th>**Description**</th>
  </tr>
  <tr>
    <td>Liste de [sensor](#2.sensor)</td>
    <td>[sensor](#2.sensor)</td>
    <td> X </td>
    <td>(@TODO) Description de results</td>
  </tr>
</table>


# Exemple

<pre>
<sensors time='...'>
   <!-- Liste de 'sensor' -->
   <sensor>
   . . .
   </sensor>
   .
   .
   .
   <sensor>
   . . .
   </sensor>
</sensors>
</pre>

# Implémentation

<table>
  <tr>
    <td>**Package**</td>
    <td>org.tensin.beerduino</td>
  </tr>
  <tr>
    <td>**Classe**</td>
    <td>TemperatureResults</td>
  </tr>
</table>



[2.sensor](#2.sensor)

    Individual result for one sensor.

# Attributs

<table>
  <tr>
    <th>**Attributs**</th>
    <th>**Type**</th>
    <th>**Req**</th>
    <th>**Description**</th>
  </tr>
  <tr>
    <td>value</td>
    <td>double</td>
    <td> X </td>
    <td>The read temperature</td>
  </tr>
  <tr>
    <td>id</td>
    <td>String</td>
    <td> X </td>
    <td>The arduino sensor ID.</td>
  </tr>
  <tr>
    <td>type</td>
    <td>String</td>
    <td>   </td>
    <td>The temperature type (F|C).</td>
  </tr>
  <tr>
    <td>seuil</td>
    <td>double</td>
    <td>   </td>
    <td>The arduino temperature limit for this sensor (defined on the arduino board).</td>
  </tr>
</table>


# Exemple

<pre>
<sensor value='...' id='...' type='...' seuil='...' />
</pre>

# Implémentation

<table>
  <tr>
    <td>**Package**</td>
    <td>org.tensin.beerduino</td>
  </tr>
  <tr>
    <td>**Classe**</td>
    <td>TemperatureResult</td>
  </tr>
</table>

<!-- END_AUTOGENERATED_CONTENT_TEMPERATURES_RESULTS -->

Contact : serge.simon@gmail.com
